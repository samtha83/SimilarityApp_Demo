{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"SimilarityApp.ipynb","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMrRNfkiUwwbr3k1Ql9CpuU"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"25RPJZ712NX8","executionInfo":{"status":"ok","timestamp":1605819449782,"user_tz":300,"elapsed":327,"user":{"displayName":"Samtha Reddy","photoUrl":"","userId":"17281997152656744305"}},"outputId":"978dfc1b-3451-41e9-cf4e-e7218b52c838"},"source":["\n","\n","#from google.colab import drive\n","#drive.mount('/content/gdrive')\n"],"execution_count":39,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dOfmwSDwSRqR","executionInfo":{"status":"ok","timestamp":1605821584373,"user_tz":300,"elapsed":233,"user":{"displayName":"Samtha Reddy","photoUrl":"","userId":"17281997152656744305"}},"outputId":"eacb4ada-28ad-46e0-c0fb-36bea68d2808"},"source":["#cd '/content/gdrive/MyDrive/APP_TextGen'"],"execution_count":57,"outputs":[{"output_type":"stream","text":["/content/gdrive/MyDrive/APP_TextGen\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"MZoYFtzE2Eku","executionInfo":{"status":"ok","timestamp":1605819449956,"user_tz":300,"elapsed":445,"user":{"displayName":"Samtha Reddy","photoUrl":"","userId":"17281997152656744305"}}},"source":["import pickle\n","import re\n","from scipy.spatial.distance import cosine as dist\n","from sklearn.neighbors import NearestNeighbors\n","import numpy as np"],"execution_count":41,"outputs":[]},{"cell_type":"code","metadata":{"id":"1Fe4EipF2NVE","executionInfo":{"status":"ok","timestamp":1605819457679,"user_tz":300,"elapsed":8158,"user":{"displayName":"Samtha Reddy","photoUrl":"","userId":"17281997152656744305"}}},"source":["vecs=[]\n","embeddings_dict = {}\n","wordidx ={}\n","wordtxt={}\n","words=[]\n","with open(\"glove.6B.50d.txt\", 'r', encoding=\"utf-8\") as f:\n","  i=0\n","  for line in f:\n","    \n","    \n","    values = line.split()\n","    word = values[0] # Example: lion 1 .5 .6 # basically after the word..its 50 dimension vector starts in text file\n","    vector = np.asarray(values[1:], \"float32\")\n","    vecs.append(vector)\n","    words.append(word)\n","    embeddings_dict[word] = vector\n","\n","    wordidx[word]=i\n","    wordtxt[i]=word\n","    i=i+1"],"execution_count":42,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"86Z2CX0h2NSC","executionInfo":{"status":"ok","timestamp":1605819457684,"user_tz":300,"elapsed":8153,"user":{"displayName":"Samtha Reddy","photoUrl":"","userId":"17281997152656744305"}},"outputId":"ea7674f0-fe1c-4191-b437-bdbdd4aee741"},"source":["#dist(embeddings_dict[\"kitten\"], embeddings_dict[\"airplane\"])"],"execution_count":43,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.775413453578949"]},"metadata":{"tags":[]},"execution_count":43}]},{"cell_type":"code","metadata":{"id":"hAbZU9ml2RBV","executionInfo":{"status":"ok","timestamp":1605819457686,"user_tz":300,"elapsed":8145,"user":{"displayName":"Samtha Reddy","photoUrl":"","userId":"17281997152656744305"}}},"source":["neigh = NearestNeighbors(n_neighbors=10, radius=0.5, metric='cosine', algorithm='brute')"],"execution_count":44,"outputs":[]},{"cell_type":"code","metadata":{"id":"qoZj0vMb2ODL","executionInfo":{"status":"ok","timestamp":1605819457922,"user_tz":300,"elapsed":8372,"user":{"displayName":"Samtha Reddy","photoUrl":"","userId":"17281997152656744305"}}},"source":["with open('similaritymodel.pkl', 'rb') as f:\n","    neigh = pickle.load(f)\n"],"execution_count":45,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"O68bdLQx3_Dp"},"source":[""]},{"cell_type":"code","metadata":{"id":"3VBpe2bx4Dcm","executionInfo":{"status":"ok","timestamp":1605819458076,"user_tz":300,"elapsed":8517,"user":{"displayName":"Samtha Reddy","photoUrl":"","userId":"17281997152656744305"}}},"source":["#distances, indices = neigh.kneighbors([vecs[wordidx[\"feminist\"]]])"],"execution_count":46,"outputs":[]},{"cell_type":"code","metadata":{"id":"Gsr6HN9v5HIJ","executionInfo":{"status":"ok","timestamp":1605819628810,"user_tz":300,"elapsed":271,"user":{"displayName":"Samtha Reddy","photoUrl":"","userId":"17281997152656744305"}}},"source":["#wordtxt"],"execution_count":56,"outputs":[]},{"cell_type":"code","metadata":{"id":"kZWG4hPX4rQ4"},"source":["#[(words[int(ind)], dist) for ind, dist in zip(list(indices[0]), list(distances[0]))]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"BvK12_VF_64y","executionInfo":{"status":"ok","timestamp":1605819458245,"user_tz":300,"elapsed":8663,"user":{"displayName":"Samtha Reddy","photoUrl":"","userId":"17281997152656744305"}}},"source":["def cal_similarword(inputw):\n","  distances, indices = neigh.kneighbors([vecs[wordidx[inputw]]])\n","  output= [(words[int(ind)], dist) for ind, dist in zip(list(indices[0]), list(distances[0]))]\n","  return output\n"],"execution_count":49,"outputs":[]},{"cell_type":"code","metadata":{"id":"wGZFK8uLASBC"},"source":["#cal_similarword('feminist')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DftjUKvJ6dAo","executionInfo":{"status":"ok","timestamp":1605819460815,"user_tz":300,"elapsed":11222,"user":{"displayName":"Samtha Reddy","photoUrl":"","userId":"17281997152656744305"}},"outputId":"9d2bcad0-5b6f-4974-87ab-1e3bd2dd13dd"},"source":["#!pip install flask-ngrok"],"execution_count":51,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: flask-ngrok in /usr/local/lib/python3.6/dist-packages (0.0.25)\n","Requirement already satisfied: Flask>=0.8 in /usr/local/lib/python3.6/dist-packages (from flask-ngrok) (1.1.2)\n","Requirement already satisfied: requests in /usr/local/lib/python3.6/dist-packages (from flask-ngrok) (2.23.0)\n","Requirement already satisfied: itsdangerous>=0.24 in /usr/local/lib/python3.6/dist-packages (from Flask>=0.8->flask-ngrok) (1.1.0)\n","Requirement already satisfied: Jinja2>=2.10.1 in /usr/local/lib/python3.6/dist-packages (from Flask>=0.8->flask-ngrok) (2.11.2)\n","Requirement already satisfied: click>=5.1 in /usr/local/lib/python3.6/dist-packages (from Flask>=0.8->flask-ngrok) (7.1.2)\n","Requirement already satisfied: Werkzeug>=0.15 in /usr/local/lib/python3.6/dist-packages (from Flask>=0.8->flask-ngrok) (1.0.1)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests->flask-ngrok) (2.10)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests->flask-ngrok) (2020.6.20)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests->flask-ngrok) (3.0.4)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests->flask-ngrok) (1.24.3)\n","Requirement already satisfied: MarkupSafe>=0.23 in /usr/local/lib/python3.6/dist-packages (from Jinja2>=2.10.1->Flask>=0.8->flask-ngrok) (1.1.1)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rtY1nn0o7VOY","executionInfo":{"status":"ok","timestamp":1605819460820,"user_tz":300,"elapsed":11222,"user":{"displayName":"Samtha Reddy","photoUrl":"","userId":"17281997152656744305"}},"outputId":"7f060a14-a3c7-4abe-a69d-52c1f514ee0a"},"source":["cd '/content/gdrive/MyDrive/APP_TextGen'"],"execution_count":52,"outputs":[{"output_type":"stream","text":["/content/gdrive/MyDrive/APP_TextGen\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"RpJu1iJi8qJP","executionInfo":{"status":"ok","timestamp":1605819460823,"user_tz":300,"elapsed":11214,"user":{"displayName":"Samtha Reddy","photoUrl":"","userId":"17281997152656744305"}}},"source":["import flask"],"execution_count":53,"outputs":[]},{"cell_type":"code","metadata":{"id":"UQSGphQg5_LO","executionInfo":{"status":"ok","timestamp":1605819460825,"user_tz":300,"elapsed":11207,"user":{"displayName":"Samtha Reddy","photoUrl":"","userId":"17281997152656744305"}}},"source":["from flask import Flask, jsonify, request\n","from flask_ngrok import run_with_ngrok\n","\n"],"execution_count":54,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AINgU8BY-ZKJ","executionInfo":{"status":"ok","timestamp":1605819581102,"user_tz":300,"elapsed":131477,"user":{"displayName":"Samtha Reddy","photoUrl":"","userId":"17281997152656744305"}},"outputId":"55ffffe7-4e81-4c4b-acd1-64c80cad72f4"},"source":["app = Flask(__name__,template_folder='/content/gdrive/MyDrive/APP_TextGen/templates')\n","run_with_ngrok(app)   #starts ngrok when the app is run\n","\n","@app.route('/', methods=['GET', 'POST'])\n","def main():\n","    if flask.request.method == 'GET':\n","        return(flask.render_template('main.html'))\n","    if flask.request.method == 'POST':\n","        inputword = flask.request.form['inputword']\n"," \n","        prediction = cal_similarword(inputword)\n","        return flask.render_template('main.html',\n","                                     original_input={'Word':inputword},\n","                                     result=prediction\n","                                     )\n","        \n","if __name__ == '__main__':\n","    app.run()        "],"execution_count":55,"outputs":[{"output_type":"stream","text":[" * Serving Flask app \"__main__\" (lazy loading)\n"," * Environment: production\n","\u001b[31m   WARNING: This is a development server. Do not use it in a production deployment.\u001b[0m\n","\u001b[2m   Use a production WSGI server instead.\u001b[0m\n"," * Debug mode: off\n"],"name":"stdout"},{"output_type":"stream","text":[" * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n"],"name":"stderr"},{"output_type":"stream","text":[" * Running on http://7c5bd2dd5807.ngrok.io\n"," * Traffic stats available on http://127.0.0.1:4040\n"],"name":"stdout"},{"output_type":"stream","text":["127.0.0.1 - - [19/Nov/2020 20:59:10] \"\u001b[37mGET / HTTP/1.1\u001b[0m\" 200 -\n","127.0.0.1 - - [19/Nov/2020 20:59:10] \"\u001b[33mGET /favicon.ico HTTP/1.1\u001b[0m\" 404 -\n","127.0.0.1 - - [19/Nov/2020 20:59:22] \"\u001b[37mPOST / HTTP/1.1\u001b[0m\" 200 -\n"],"name":"stderr"}]}]}